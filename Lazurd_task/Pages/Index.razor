@page "/"
@using Lazurd_task.Services

<h3>Contact List</h3>

<!-- Sorting buttons -->
<div class="btn-group mb-3">
    <button class="btn btn-primary" @onclick="SortByFirstName">Sort by First Name</button>
    <button class="btn btn-primary" @onclick="SortByLastName">Sort by Last Name</button>
</div>

<!-- Contact List -->
@if (contacts != null && contacts.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in contacts)
            {
                <tr>
                    <td>@contact.FirstName</td>
                    <td>@contact.LastName</td>
                    <td>@contact.Email</td>
                    <td>@contact.PhoneNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ViewContactDetails(contact.Id)">View</button>
                        <button class="btn btn-warning" @onclick="() => EditContact(contact.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteContact(contact.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No contacts found.</p>
}

@code {
    private List<Models.Contact> contacts;
    private bool sortAscending = true;

    [Inject] private ContactService contactService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }

    protected override void OnInitialized()
    {
        LoadContacts();
    }

    private void LoadContacts()
    {
        contacts = contactService.GetAllContacts();
    }

    private void ViewContactDetails(int contactId)
    {
        navigationManager.NavigateTo($"/contact-details/{contactId}");
    }

    private void EditContact(int contactId)
    {
        navigationManager.NavigateTo($"/edit-contact/{contactId}");
    }
    [Inject] private IJSRuntime jsRuntime { get; set; }

    private async Task DeleteContact(int contactId)
    {
        var confirmDelete = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");
        if (confirmDelete)
        {
            contactService.DeleteContact(contactId);
            LoadContacts(); // Refresh 
        }
    }

    private void SortByFirstName()
    {
        contacts = sortAscending ? contacts.OrderBy(c => c.FirstName).ToList() : contacts.OrderByDescending(c => c.FirstName).ToList();
        sortAscending = !sortAscending;
    }

    private void SortByLastName()
    {
        contacts = sortAscending ? contacts.OrderBy(c => c.LastName).ToList() : contacts.OrderByDescending(c => c.LastName).ToList();
        sortAscending = !sortAscending;
    }
}
